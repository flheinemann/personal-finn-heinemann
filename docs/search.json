[
  {
    "objectID": "about.html#basic-info",
    "href": "about.html#basic-info",
    "title": "About Me",
    "section": "Basic Info",
    "text": "Basic Info\nMy name is Finn Heinemann and I am a student-athlete at Georgetown College!"
  },
  {
    "objectID": "about.html#life-and-education",
    "href": "about.html#life-and-education",
    "title": "About Me",
    "section": "Life and Education",
    "text": "Life and Education\nI am from Paderborn, Germany where I went to high school, called “Pelizaeus-Gymnasium Paderborn”. 2 months after I received my high school diploma I went to the United States to play Volleyball and further pursue my education.\nCurrently, I am a junior at Georgetown College, triple-majoring in Business Administration, Economics, and Finance, with a minor in Computer Science."
  },
  {
    "objectID": "about.html#volleyball-career",
    "href": "about.html#volleyball-career",
    "title": "About Me",
    "section": "Volleyball Career",
    "text": "Volleyball Career\nI started playing Volleyball at the age of 11 at my hometown club called “Vo.R Paderborn”. During my years with the youth team, we won the west german championship four times in the u13, u14, u18, and u20. With the age of 14, I also joined a men’s team in my hometown, where I played for 3 years, before transfering to a new club called “DJK Delbrück”, where I played in the 3. Bundesliga with the age of 17. Unfortunately, my last season in Germany got cancelled half way through and I came to Georgetown in August 2021. I am looking forward to play my third season here and qualify for the national championship tournament for the third consecutive time.\nYou can find our schedule for the upcoming season here!"
  },
  {
    "objectID": "articles/index.html",
    "href": "articles/index.html",
    "title": "My Articles",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nMaking Graphics with Data from the Web\n\n\n\n\n\n\n\nMy Own Loop\n\n\n\n\n\n\n\n\nTable-Sort Assignment\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "articles/article_01.html",
    "href": "articles/article_01.html",
    "title": "personal-finn-heinemann",
    "section": "",
    "text": "Write a higher-order function loop that provides something like a for loop statement. It takes a value, a test function, an update function, and a body function. Each iteration, it first runs the test function on the current loop value and stops if that returns false. Then it calls the body function, giving it the current value. Finally, it calls the update function to create a new value and starts from the beginning.\nWhen defining the function, you can use a regular loop to do the actual looping.\n\n\n\n\n\n\n\n\nI start declaring the function in line 24 with the name “myLoop”. The function has the parameters “value”, “test”, “update”, and “body”. Value is the starting value of the loop, test is the argument that the value is tested for and results in either being true or false, update is what how value should be updated for the next step, in order to go to the next value, and body shows what should be done with the function.\nThe function basically consists of one for-loop only. A for-loop needs 3 arguments: 1. The first argument is “i”, which is the starting value of the loop 2. The second argument shows what i should be compared to in order to determine if the loop should go on or should terminate 3. The third argument signals how i should be updated to move on in the loop\nThe body of a for-loop contains the code that determines what is actually supposed to happen with each value/ how each value should be “modified”\nAs we can see, the parameters of the function match up very-well with the needed arguments for a for-loop.\nTherefore in our for-loop i should be equal to value (i=value), i should be teasted with the for what is determined in the parameter of the function (test(i)), and i should be updated by what is set for update (i=update(i)). Then, inside the for-loop i should be modified based on what is given for the body-parameter from the function (body(i)).\nThe code is very simple but at the same time very effective in creating a loop with the arguments given as parameters for the function.\nAfter that, I tried the function with a specific example to make sure it works properly, like the instructions from the book command.\n\n\n\n\nFirstly, I test the myLoop function with a start value of 3, the test is if the value is still bigger than 0, and the update of the value should be that it decreases by one everytime it goes through the loop. The body of the function is the function colsole.log which just prints out the input value in the console. We cxan see that the function does exactly that - prints out 3, then 2, then 1.\nSecondly, I wanted to try the function eith my own example, where I firdt wrote a function called “timesTen”, which simply multiplies the input value by 10 and then prints out the result. Then I tested the myLoop function with the start value of 0, the test shall be if the value is smaller or equal to five, and the value should increase by 1 every time we go through the loop. The body of the function shall be the earlier declared timesTen function. Consequently, the output were 0, 10, 20, 30, 40, and 50. So what happened was that the function took every number from 0 to 5, multiplied every by 10, and then printed out each result in the console.\n\n\n\nThe javascript file with the full code can be found here!"
  },
  {
    "objectID": "articles/article_01.html#my-own-loop",
    "href": "articles/article_01.html#my-own-loop",
    "title": "personal-finn-heinemann",
    "section": "",
    "text": "Write a higher-order function loop that provides something like a for loop statement. It takes a value, a test function, an update function, and a body function. Each iteration, it first runs the test function on the current loop value and stops if that returns false. Then it calls the body function, giving it the current value. Finally, it calls the update function to create a new value and starts from the beginning.\nWhen defining the function, you can use a regular loop to do the actual looping.\n\n\n\n\n\n\n\n\nI start declaring the function in line 24 with the name “myLoop”. The function has the parameters “value”, “test”, “update”, and “body”. Value is the starting value of the loop, test is the argument that the value is tested for and results in either being true or false, update is what how value should be updated for the next step, in order to go to the next value, and body shows what should be done with the function.\nThe function basically consists of one for-loop only. A for-loop needs 3 arguments: 1. The first argument is “i”, which is the starting value of the loop 2. The second argument shows what i should be compared to in order to determine if the loop should go on or should terminate 3. The third argument signals how i should be updated to move on in the loop\nThe body of a for-loop contains the code that determines what is actually supposed to happen with each value/ how each value should be “modified”\nAs we can see, the parameters of the function match up very-well with the needed arguments for a for-loop.\nTherefore in our for-loop i should be equal to value (i=value), i should be teasted with the for what is determined in the parameter of the function (test(i)), and i should be updated by what is set for update (i=update(i)). Then, inside the for-loop i should be modified based on what is given for the body-parameter from the function (body(i)).\nThe code is very simple but at the same time very effective in creating a loop with the arguments given as parameters for the function.\nAfter that, I tried the function with a specific example to make sure it works properly, like the instructions from the book command.\n\n\n\n\nFirstly, I test the myLoop function with a start value of 3, the test is if the value is still bigger than 0, and the update of the value should be that it decreases by one everytime it goes through the loop. The body of the function is the function colsole.log which just prints out the input value in the console. We cxan see that the function does exactly that - prints out 3, then 2, then 1.\nSecondly, I wanted to try the function eith my own example, where I firdt wrote a function called “timesTen”, which simply multiplies the input value by 10 and then prints out the result. Then I tested the myLoop function with the start value of 0, the test shall be if the value is smaller or equal to five, and the value should increase by 1 every time we go through the loop. The body of the function shall be the earlier declared timesTen function. Consequently, the output were 0, 10, 20, 30, 40, and 50. So what happened was that the function took every number from 0 to 5, multiplied every by 10, and then printed out each result in the console.\n\n\n\nThe javascript file with the full code can be found here!"
  },
  {
    "objectID": "posts/blogpost_2.html",
    "href": "posts/blogpost_2.html",
    "title": "Tigers season ends in 5-set heartbreak",
    "section": "",
    "text": "The original atricle can be found at this link!\nGeorgetown entered day 2 of pool play in the NAIA Tournament knowing a win must happen to keep hope alive of advancing to the semifinals. The Tigers took on #1 Benedictine-Mesa for the 2nd time this season. The regular season meeting saw the Tigers fall in straight sets. This time, on a neutral floor, Georgetown brought everything it had and then some. Mesa had just a hair more as they took the match in 5 sets, ending Georgetown’s season.\nIn the opener, Mesa raced out to a 5-2 lead before Georgetown answered with 3 of the next 4 to keep close. Thanks to strong early play from Liam Morrissey, the Tigers would take the lead at 10-9. Later in the set, Mesa moved back ahead at 14-13 setting the stage for a Tigers rally that proved to be the difference in the set. Kills from Ryan Gunn and Thomas Dunkley put the Tigers back on top. Kacper Dobrowolski followed with an ace, forcing a Mesa timeout. Another Gunn kill and Dobrowoloski ace put GC up 18-14. Morissey and Miguel Vega would reintroduce themselves to push the lead to 21-15 and the last Mesa timeout. It did little to stem the tide as Tyler Laha put the finishing touches on an impressive 25-19 opening win.\nMesa used the set break to regroup. Out of it, they showed why they earned the top-seed in the tournament. The Redhawks found an offensive rhythm in sets 2 and 3 that very few teams in the country could stop. A .429 2nd set followed by a hitting clip of .577 in the 3rd sent Mesa ahead in the match 2-1, thanks to 25-17 and 25-15 set wins, to push the Tigers to the brink of elimination.\nThe start of the 4th looked like it would be a mere formality. Mesa scored the first 5 points of the set, forcing the Tigers to call the early timeout. While the Tigers tried to chip away, the Redhawks kept the pressure on and growing the lead to 11-5. Georgetown would finally get some life thanks to Redhawk errors and a Thomas Dunkley ace. It resulted in 4 straight for GC to get the Tigers within 11-9. Mesa would assert itself again to take a 15-10 before Georgetown turned it one of its best runs of the season. With its collective back against the wall, Georgetown went on a stunning 9-1 run to surge to a 19-16 lead. Mesa would stay poised and tie the set at 20, forcing Georgetown to regroup with a timeout. The teams would trade points from there. Leading 22-21, Ryan Gunn found an opening to put the Tigers up 2. He would do it again on the following point to give GC a set point at 24-22. Mesa’s final attack went wide and the Tigers pulled off the incredible rally to send the match to a 5th set.\nThe end of the 4th would prove to be the final high point for Georgetown. As was the case against Saint Xavier, Georgetown fell in a huge hole early against Mesa and couldn’t recover. The Redhawks stormed out to an 8-2 lead as the Tigers committed 4 errors in that 10-point stretch. GC did score 3 straight to get within 8-5 but a Mesa kill, followed by another GC attack error, pushed the Mesa lead to 10-5. Georgetown would never get within 4 again as the set and match ended on a Georgetown serve error to bring the 2023 season to a close, as Mesa took the 5th, 15-9.\nRyan Gunn led the Tigers offense with 16 kills but the overall numbers just weren’t there in this one. GC hit just .153 for the match, while Mesa hit a .354 clip. One could argue it made the Tiger effort all the more impressive given the offense was not at its best on this day.\nGeorgetown’s season ends with a 21-8 record. The Tigers are slated to return the bulk of the roster in 2024 with the goal and expectation of a deeper run in the tourney."
  },
  {
    "objectID": "posts/blogpost_4.html#explanations-of-the-code",
    "href": "posts/blogpost_4.html#explanations-of-the-code",
    "title": "How to add a side-bar in your Quarto-Website",
    "section": "Explanations of the Code",
    "text": "Explanations of the Code\nIn order to create a sidebar for our website, we need to add it to the “_quarto.yml” document of our project.\nIt needs to go under website, indeted just as much as “title”, “side-path”, and “navbar”. Firstly, we need to define the different properties for the sidebar. For “id” I chose articles since I wanted to include the main sides of my website and every article by themselves. For the “style”, I chose docked, for the “background” light and “collapse-level” 2.\nI added a logo to the side-bar of my website which I saved as an image in the image-folder of my project. The logo I chose for my website is my hometowns’ logo (Paderborn).\nFinally, I added all the documents which I wanted to include in the side-bar. For each document, we need to include the href, which is the refernce where the document is located, and text which is the name of the document shown in the side-bar."
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Finn’s Blog",
    "section": "",
    "text": "Character-Counting function\n\n\n\n\n\n\n\nComputer Science\n\n\nsubstantive\n\n\nfunction\n\n\n\n\nBlog Post 5\n\n\n\n\n\n\nNov 24, 2023\n\n\nFinn Heinemann\n\n\n\n\n\n\n  \n\n\n\n\nHow to add a side-bar in your Quarto-Website\n\n\n\n\n\n\n\nComputer Science\n\n\nsubstantive\n\n\n\n\nBlog Post 4\n\n\n\n\n\n\nNov 24, 2023\n\n\nFinn Heinemann\n\n\n\n\n\n\n  \n\n\n\n\nPaderborn\n\n\n\n\n\n\n\nCity\n\n\nGermany\n\n\n\n\nBlog Post 3\n\n\n\n\n\n\nNov 9, 2023\n\n\nFinn Heinemann\n\n\n\n\n\n\n  \n\n\n\n\nTigers season ends in 5-set heartbreak\n\n\n\n\n\n\n\nVolleyball\n\n\nNAIA\n\n\nGeorgetown College\n\n\n\n\nBlog Post 2\n\n\n\n\n\n\nNov 9, 2023\n\n\nFinn Heinemann\n\n\n\n\n\n\n  \n\n\n\n\nAuthentic German Potatoe Salad\n\n\n\n\n\n\n\nCooking\n\n\nGermany\n\n\n\n\nBlog Post 1\n\n\n\n\n\n\nNov 9, 2023\n\n\nFinn Heinemann\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/blogpost_5.html",
    "href": "posts/blogpost_5.html",
    "title": "Character-Counting function",
    "section": "",
    "text": "Code\n\n\n\nExplanation of the Code\nWith the help of this function, we can determine how many times a certain character is oncluded in a string. The two parameters of the function are the string, and char, which is the character we want to look for in the given string.\nAt the beginning of the function we establish a variable called “Chars” which helps to store how many of the character we are looking for are included in the string, as we go through the string one by one.\nThe main part of the funciton is a for-loop hwich has the argument “position” (indicating at which position of the string we currently are), and the initial value of position is 0, we want to go through the loop as long as position is smaller or equal to the length of the input string-1 (because the first character of the string is at position 0), and possition increases by 1 every time we go through the loop.\ninside the loop, we compare if the the string at current position equals the char-input we are looking for. If yes, our Chars-varaibale increases by one. After we get out of the for-loop at the end of the “countChar”-function, the “CHars”-variable gets loged out in the console, which shows us how many of the characters we are looking for are actually in the input string."
  },
  {
    "objectID": "posts/blogpost_3.html",
    "href": "posts/blogpost_3.html",
    "title": "Paderborn",
    "section": "",
    "text": "The original article can be found here!\n\nGeneral\nPaderborn (German pronunciation: [paːdɐˈbɔʁn] ⓘ; Westphalian: Patterbuorn, also Paterboärn)[3] is a city in eastern North Rhine-Westphalia, Germany, capital of the Paderborn district. The name of the city derives from the river Pader and Born, an old German term for the source of a river. The river Pader originates in more than 200 springs near Paderborn Cathedral, where St. Liborius is buried.\nPaderborn ranks 55th on the List of cities in Germany by population.\n\n\nHistory\nPaderborn was founded as a bishopric by Charlemagne in 795, although its official history began in 777 when Charlemagne built a castle near the Paderborn springs.[4] In 799 Pope Leo III fled his enemies in Rome and reached Paderborn, where he met Charlemagne, and stayed there for three months. It was during this time that it was decided that Charlemagne would be crowned emperor. Charlemagne reinstated Leo in Rome in 800 and was crowned as Holy Roman Emperor by Leo in return. In 836, St. Liborius became the patron saint of Paderborn after his bones were moved there from Le Mans by Bishop Badurad.[5] St. Liborius is commemorated in Paderborn every year in July with the Liborifest. The bishop of Paderborn, Meinwerk, became a Prince of the Empire in 1100. The bishop had several large buildings built, and the area became a place for the emperors to stay.The city was taken by Prussia in 1802, then by the French vassal state Kingdom of Westphalia from 1807 to 1813 and then returned to Prussia.\nNative Friedrich Sertürner, a pharmacist’s apprentice in Paderborn, was the first to isolate morphine from opium in 1804.In 1914 the Paderborn military camp was turned into a prisoner of war camp named Sennelager.\nIn 1930, the See of Paderborn was promoted to archdiocese.\nDuring World War II, Paderborn was bombed by Allied aircraft in 1944 and 1945, resulting in 85% destruction, including many of the historic buildings. It was seized by the US 3rd Armored Division after a pitched battle 31 March – 1 April 1945, in which tanks and flamethrowers were used during combined mechanized-infantry assaults against the city’s southwestern, southern and southeastern approaches.[6]\nAfter the city was reconstructed in the 1940s and 1950s, Paderborn became a major industrial seat in Westphalia.[5] The British Army retained a significant presence in the area until 2020, when British units were relocated back to the United Kingdom. Only a small training and enabling staff remain at Paderborn to facilitate temporary deployments to use the Sennelager Training Area.[7]\nOn May 20, 2022, Paderborn was hit by a damaging tornado, leaving 38 injured & considerable damage along its path."
  },
  {
    "objectID": "posts/blogpost_1.html",
    "href": "posts/blogpost_1.html",
    "title": "Authentic German Potatoe Salad",
    "section": "",
    "text": "The original article can be found here!\nThis is my mother’s recipe for authentic German potato salad. Everyone, German or not, loves it. It is easy to double the recipe as well. I often bring it to potlucks, and we also have it at home on special occasions. There are usually no leftovers, but if there are, they don’t last long!\nThe German potato salad features tender potatoes in a flavorful bacon vinaigrette.\nWhat Is German Potato Salad? Unlike mayonnaise-based American potato salads, German potato salad is tossed in a vinegar-based dressing made with bacon drippings. It is usually served warm instead of cold, but some people prefer to serve it at room temperature.\nHow to Make German Potato Salad You’ll find a detailed ingredient list and step-by-step instructions in the recipe below, but let’s go over the basics:\nGerman Potato Salad Ingredients\nThese are the ingredients you’ll need to make this authentic German potato salad recipe:\nPotatoes: We recommend using waxy potatoes (such as New Potatoes) because they hold their shape well. Yukon Gold, an all-purpose variety, is also a good choice. Bacon: Bacon (and its grease) adds tons of meaty flavor to the hearty German potato salad. Onion: An onion, cooked in bacon grease, lends even more complexity and flavor. Vinegar: White vinegar adds tanginess that cuts through the richness from the potatoes and bacon. Sugar: A bit of white sugar gives the savory potato salad subtle sweetness. Seasonings and herbs: This German potato salad recipe is seasoned with salt, pepper, and fresh parsley. Learn more: What Are the Best Potatoes for Potato Salad?\nHow Do You Make German Potato Salad?\nHere’s a brief overview of what you can expect when you make homemade German potato salad:\nBoil, drain, and cool the diced and peeled potatoes. Fry the bacon in a skillet, then cook the onion in the bacon grease. Add the vinegar, sugar, water, salt, and pepper and bring to a boil. Add the potatoes and ½ of the bacon to the boiling liquid. When heated through, transfer the potatoes to a serving dish. Garnish with remaining bacon and parsley. What to Serve With German Potato Salad This German potato salad would be the perfect addition to any potluck or picnic spread. In need of some more inspiration? Explore our collection of 15 Best Potluck Side Dishes Are So Good Everyone Will Be Begging You for the Recipes. Here are a few of the crowd-pleasing recipes you’ll find:\nClassic Macaroni Salad Squash Casserole Perfect Summer Fruit Salad How Long Does German Potato Salad Last? You can store your leftover German potato salad in a shallow, airtight container for up to five days. Reheat in the oven, covered with foil, to prevent the potatoes from drying out.\nCan You Freeze German Potato Salad? German potato salads freeze better than their mayonnaise-based counterparts. Freeze the (completely cooled) potato salad for up to three months, then thaw in the fridge and reheat in the oven.\nAllrecipes Community Tips and Praise “Absolutely delicious,” raves krnanderson2901. “Some German potato salad recipes that I have tried don’t have enough tang, but this one has that tangy, bacon flavor I love!”\n“I made this tonight and it was outstanding,” according to Tom McCullough Sr. “Didn’t have any white wine vinegar so I substituted plain white vinegar and a quarter cup of pinot grigio. Dicing the potatoes before cooking and it cut down on cooking time! This recipe is a keeper!”\n“Our family includes picky eaters,” says one Allrecipes community member. “This was an absolute hit with everyone!! The use of the bacon fat to sauté the onions makes this so flavorful!”"
  },
  {
    "objectID": "articles/article_03.html",
    "href": "articles/article_03.html",
    "title": "personal-finn-heinemann",
    "section": "",
    "text": "Get the different tables needed for the visualizations from the NAIA stats website:\n\nlibrary(rvest)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\nlibrary(stringr)\nurl &lt;- \"https://naiastats.prestosports.com/sports/mvball/2021-22/teams/georgetown\"\ntables &lt;- url %&gt;% \n  read_html() %&gt;% \n  html_nodes(\"table\")\n\nseasonStats &lt;- tables %&gt;%\n  purrr::pluck(4) %&gt;%\n  html_table() \n\ngameLog &lt;- tables %&gt;%\n  purrr::pluck(12) %&gt;%\n  html_table() \n\nMake visualization of who had the most kills in the season:\n\ntopKillers &lt;- seasonStats %&gt;% \n  mutate(name= gsub(\"\\\\s+\", \" \", str_trim(Name))) %&gt;% \n  arrange(desc(k)) %&gt;% \n  select(\"name\", \"k\") %&gt;% \n  head(5) \n\nkillersGraphic &lt;- topKillers %&gt;% \n  ggplot(aes(x=reorder(name,k), y=k)) +\n  geom_col()+\n  labs(x=\"Player\", y=\"Kills\")\nkillersGraphic\n\n\n\n\nMake a Visualization of the Service Aces to Service Errors:\n\nacesErrors &lt;- gameLog %&gt;% \n  mutate(opponent= gsub(\"\\\\s+\", \" \", str_trim(Opponent))) %&gt;% \n  ggplot(aes(x=sa,y=se))+\n  geom_point()+\n  geom_text(aes(label=opponent),hjust=1, vjust=0)+\n  labs(x=\"Service Aces\",y=\"Service Errors\")\nacesErrors\n\n\n\n\nSources:\nhttps://stackoverflow.com/questions/25707647/merge-multiple-spaces-to-single-space-remove-trailing-leading-spaces (get rid of extra spaces in the names)"
  },
  {
    "objectID": "articles/article_03.html#making-graphics-with-data-from-the-web",
    "href": "articles/article_03.html#making-graphics-with-data-from-the-web",
    "title": "personal-finn-heinemann",
    "section": "",
    "text": "Get the different tables needed for the visualizations from the NAIA stats website:\n\nlibrary(rvest)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\nlibrary(stringr)\nurl &lt;- \"https://naiastats.prestosports.com/sports/mvball/2021-22/teams/georgetown\"\ntables &lt;- url %&gt;% \n  read_html() %&gt;% \n  html_nodes(\"table\")\n\nseasonStats &lt;- tables %&gt;%\n  purrr::pluck(4) %&gt;%\n  html_table() \n\ngameLog &lt;- tables %&gt;%\n  purrr::pluck(12) %&gt;%\n  html_table() \n\nMake visualization of who had the most kills in the season:\n\ntopKillers &lt;- seasonStats %&gt;% \n  mutate(name= gsub(\"\\\\s+\", \" \", str_trim(Name))) %&gt;% \n  arrange(desc(k)) %&gt;% \n  select(\"name\", \"k\") %&gt;% \n  head(5) \n\nkillersGraphic &lt;- topKillers %&gt;% \n  ggplot(aes(x=reorder(name,k), y=k)) +\n  geom_col()+\n  labs(x=\"Player\", y=\"Kills\")\nkillersGraphic\n\n\n\n\nMake a Visualization of the Service Aces to Service Errors:\n\nacesErrors &lt;- gameLog %&gt;% \n  mutate(opponent= gsub(\"\\\\s+\", \" \", str_trim(Opponent))) %&gt;% \n  ggplot(aes(x=sa,y=se))+\n  geom_point()+\n  geom_text(aes(label=opponent),hjust=1, vjust=0)+\n  labs(x=\"Service Aces\",y=\"Service Errors\")\nacesErrors\n\n\n\n\nSources:\nhttps://stackoverflow.com/questions/25707647/merge-multiple-spaces-to-single-space-remove-trailing-leading-spaces (get rid of extra spaces in the names)"
  },
  {
    "objectID": "articles/article_02.html",
    "href": "articles/article_02.html",
    "title": "personal-finn-heinemann",
    "section": "",
    "text": "Starting from the site that populates a table of Bhangra artists, add three buttons:\n-&gt; a button that when clicked will sort the artists by name;\n-&gt; a button that when clicked will sort the artists by year of birth;\n-&gt; a button that when clicked will randomly shuffle the rows of the original table.\n\n\n\n\nAt the beginning I declared the function “populateTable”, which has the parameter “arr”. Then the “querySelector”- function is used to find the bhangra table and the variable “cells” is created only with the opening body value to begin with, where the information for the individual cells shall be stored in. Then, a row is added to the cells varaibale, as well as each of the headers (Name, Year of Birth, and Link) as the row headers.\nNext, I use a for-loop to populate each row with the information for each artist. The starting valöue of the for-loop is 0, the test is if the current vlaue is smaller than the length of the artist array, and the current value shall increase by 1 every time going through the loop. Inside the array, we inserta new row with the name, birthyear and link for each artist, by pulling the attributes from the artist array at the “i”-th place. Consequently, the loop goes through the artist array and makes a new row for every artist, conraining each artists data.\nFinally, the tbody gets closed at the end which is added as a command to the cells variable, the table is filled with the content of cells with the comman “innerHTML”, and a table is created by calling the function with the artists array in the parameter.\n\n\n\n\nNext, I needed to find the buttons and make a reference to them, which I did with the help of the querySelector function again (lines 68-70). Then, I added the eventListeners, which basically had the purpose of running a function, when each button is clicked. Lastly, I had to declare the 3 listener functions which shall be ran whenever a button is clicked (lines 74-76).\nIf the nameButton was clicked, the “sortByName”- function shall be ran, which has a helper function called “byName”. The byName helper function takes the 2 name properties of each of the 2 inputs, and compares them, and then return 1 if the name of input “a” is bigger then the name of input “b” (in this case bigger means comes before in alphabetical order), meaning the name of “b” coming after the name of “a” in alphabetical order. The same way -1 gets returned if the name of input “b” is bigger than the name of input “a”, meaning the name of “b” coming first in alphabetical order. If they are equal 0 is returned as a result of both being the exact same names. The actual “sortByName”- function then produces a sorted array with the command in line 87 and then populates the table with the earlier declared populateTable function and the sortedArray as the input of the function.\nAfter that, I do the exact same thing again for the dateButton with a function called “sortByDate” (lines 97-100)and a helper function called “byDate” (lines 91-95). The only difference is that the helper function compares the “birthYear” attribute of each artist and sorts them, not the name attribute.\nFinally I declare a “sortByRandom”- function (lines 112-115) which is the eventListener function for the “randomButton” and uses a helper function called “Array.prototype.shuffle”, which shuffles the array randomly. The “sortByRandom” function then producesa shuffled array with the help of the helper function and populates the table with the newly shuffled, randomized new array.\n\n\n\nTable after pressing the “Sort by Name” button:\n\nTable after pressing the “Sort by Birth Year” button:\n\nTable after pressing the “Randomize” button:\n\n\n\n\nThe javascript file with the full code can be found here!"
  },
  {
    "objectID": "articles/article_02.html#table-sort-assignment",
    "href": "articles/article_02.html#table-sort-assignment",
    "title": "personal-finn-heinemann",
    "section": "",
    "text": "Starting from the site that populates a table of Bhangra artists, add three buttons:\n-&gt; a button that when clicked will sort the artists by name;\n-&gt; a button that when clicked will sort the artists by year of birth;\n-&gt; a button that when clicked will randomly shuffle the rows of the original table.\n\n\n\n\nAt the beginning I declared the function “populateTable”, which has the parameter “arr”. Then the “querySelector”- function is used to find the bhangra table and the variable “cells” is created only with the opening body value to begin with, where the information for the individual cells shall be stored in. Then, a row is added to the cells varaibale, as well as each of the headers (Name, Year of Birth, and Link) as the row headers.\nNext, I use a for-loop to populate each row with the information for each artist. The starting valöue of the for-loop is 0, the test is if the current vlaue is smaller than the length of the artist array, and the current value shall increase by 1 every time going through the loop. Inside the array, we inserta new row with the name, birthyear and link for each artist, by pulling the attributes from the artist array at the “i”-th place. Consequently, the loop goes through the artist array and makes a new row for every artist, conraining each artists data.\nFinally, the tbody gets closed at the end which is added as a command to the cells variable, the table is filled with the content of cells with the comman “innerHTML”, and a table is created by calling the function with the artists array in the parameter.\n\n\n\n\nNext, I needed to find the buttons and make a reference to them, which I did with the help of the querySelector function again (lines 68-70). Then, I added the eventListeners, which basically had the purpose of running a function, when each button is clicked. Lastly, I had to declare the 3 listener functions which shall be ran whenever a button is clicked (lines 74-76).\nIf the nameButton was clicked, the “sortByName”- function shall be ran, which has a helper function called “byName”. The byName helper function takes the 2 name properties of each of the 2 inputs, and compares them, and then return 1 if the name of input “a” is bigger then the name of input “b” (in this case bigger means comes before in alphabetical order), meaning the name of “b” coming after the name of “a” in alphabetical order. The same way -1 gets returned if the name of input “b” is bigger than the name of input “a”, meaning the name of “b” coming first in alphabetical order. If they are equal 0 is returned as a result of both being the exact same names. The actual “sortByName”- function then produces a sorted array with the command in line 87 and then populates the table with the earlier declared populateTable function and the sortedArray as the input of the function.\nAfter that, I do the exact same thing again for the dateButton with a function called “sortByDate” (lines 97-100)and a helper function called “byDate” (lines 91-95). The only difference is that the helper function compares the “birthYear” attribute of each artist and sorts them, not the name attribute.\nFinally I declare a “sortByRandom”- function (lines 112-115) which is the eventListener function for the “randomButton” and uses a helper function called “Array.prototype.shuffle”, which shuffles the array randomly. The “sortByRandom” function then producesa shuffled array with the help of the helper function and populates the table with the newly shuffled, randomized new array.\n\n\n\nTable after pressing the “Sort by Name” button:\n\nTable after pressing the “Sort by Birth Year” button:\n\nTable after pressing the “Randomize” button:\n\n\n\n\nThe javascript file with the full code can be found here!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hello there!",
    "section": "",
    "text": "This website is a project which is part of the class CSC324 at Georgetown College! This website is built with quarto framework and contains information about myself, as well as some other interesting stuff!\nI hope you enjoy going through my website and maybe learn something new!"
  }
]